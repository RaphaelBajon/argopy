#!/usr/bin/env python

import os
import sys
import pickle
import math
from datetime import datetime
import pandas as pd
import curses

def colors():
	d = {}
	d['END'] = '\33[0m'
	d['BOLD'] = '\33[1m'
	d['ITALIC'] = '\33[3m'
	d['URL'] = '\33[4m'
	d['BLINK'] = '\33[5m'
	d['BLINK2'] = '\33[6m'
	d['SELECTED'] = '\33[7m'

	d['BLACK'] = '\33[30m'
	d['RED'] = '\33[31m'
	d['GREEN'] = '\33[32m'
	d['YELLOW'] = '\33[33m'
	d['BLUE'] = '\33[34m'
	d['VIOLET'] = '\33[35m'
	d['BEIGE'] = '\33[36m'
	d['WHITE'] = '\33[37m'

	d['BLACKBG'] = '\33[40m'
	d['REDBG'] = '\33[41m'
	d['GREENBG'] = '\33[42m'
	d['YELLOWBG'] = '\33[43m'
	d['BLUEBG'] = '\33[44m'
	d['VIOLETBG'] = '\33[45m'
	d['BEIGEBG'] = '\33[46m'
	d['WHITEBG'] = '\33[47m'

	d['GREY'] = '\33[90m'
	d['RED2'] = '\33[91m'
	d['GREEN2'] = '\33[92m'
	d['YELLOW2'] = '\33[93m'
	d['BLUE2'] = '\33[94m'
	d['VIOLET2'] = '\33[95m'
	d['BEIGE2'] = '\33[96m'
	d['WHITE2'] = '\33[97m'

	d['GREYBG'] = '\33[100m'
	d['REDBG2'] = '\33[101m'
	d['GREENBG2'] = '\33[102m'
	d['YELLOWBG2'] = '\33[103m'
	d['BLUEBG2'] = '\33[104m'
	d['VIOLETBG2'] = '\33[105m'
	d['BEIGEBG2'] = '\33[106m'
	d['WHITEBG2'] = '\33[107m'

	return d

def colorit(txt, FG='red', BG=None):
	c = colors()
	C_TXT = c['RED']
	if BG is not None:
		C_BG = c[BG]

	CEND = '\033[0m'
	return "%s%s%s" % (C_TXT, txt, CEND)

if __name__ == "__main__":
	x = 0
	for i in range(24):
		colors = ""
		for j in range(5):
			code = str(x + j)
			colors = colors + "\33[" + code + "m\\33[" + code + "m\033[0m "
		print(colors)
		x = x + 5

	print("blabla: %s and so on ..." % colorit('hello world !', 'red'))


#
# def draw_menu(stdscr):
# 	k = 0
# 	cursor_x = 0
# 	cursor_y = 0
#
# 	# Clear and refresh the screen for a blank canvas
# 	stdscr.clear()
# 	stdscr.refresh()
#
# 	# Start colors in curses
# 	curses.start_color()
# 	curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
# 	curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
# 	curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)
#
# 	# Loop where k is the last character pressed
# 	while (k != ord('q')):
#
# 		# Initialization
# 		stdscr.clear()
# 		height, width = stdscr.getmaxyx()
#
# 		if k == curses.KEY_DOWN:
# 			cursor_y = cursor_y + 1
# 		elif k == curses.KEY_UP:
# 			cursor_y = cursor_y - 1
# 		elif k == curses.KEY_RIGHT:
# 			cursor_x = cursor_x + 1
# 		elif k == curses.KEY_LEFT:
# 			cursor_x = cursor_x - 1
#
# 		cursor_x = max(0, cursor_x)
# 		cursor_x = min(width - 1, cursor_x)
#
# 		cursor_y = max(0, cursor_y)
# 		cursor_y = min(height - 1, cursor_y)
#
# 		# Declaration of strings
# 		title = "Curses example"[:width - 1]
# 		subtitle = "Written by Clay McLeod"[:width - 1]
# 		keystr = "Last key pressed: {}".format(k)[:width - 1]
# 		statusbarstr = "Press 'q' to exit | STATUS BAR | Pos: {}, {}".format(cursor_x, cursor_y)
# 		if k == 0:
# 			keystr = "No key press detected..."[:width - 1]
#
# 		# Centering calculations
# 		start_x_title = int((width // 2) - (len(title) // 2) - len(title) % 2)
# 		start_x_subtitle = int((width // 2) - (len(subtitle) // 2) - len(subtitle) % 2)
# 		start_x_keystr = int((width // 2) - (len(keystr) // 2) - len(keystr) % 2)
# 		start_y = int((height // 2) - 2)
#
# 		# Rendering some text
# 		whstr = "Width: {}, Height: {}".format(width, height)
# 		stdscr.addstr(0, 0, whstr, curses.color_pair(1))
#
# 		# Render status bar
# 		stdscr.attron(curses.color_pair(3))
# 		stdscr.addstr(height - 1, 0, statusbarstr)
# 		stdscr.addstr(height - 1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
# 		stdscr.attroff(curses.color_pair(3))
#
# 		# Turning on attributes for title
# 		stdscr.attron(curses.color_pair(2))
# 		stdscr.attron(curses.A_BOLD)
#
# 		# Rendering title
# 		stdscr.addstr(start_y, start_x_title, title)
#
# 		# Turning off attributes for title
# 		stdscr.attroff(curses.color_pair(2))
# 		stdscr.attroff(curses.A_BOLD)
#
# 		# Print rest of text
# 		stdscr.addstr(start_y + 1, start_x_subtitle, subtitle)
# 		stdscr.addstr(start_y + 3, (width // 2) - 2, '-' * 4)
# 		stdscr.addstr(start_y + 5, start_x_keystr, keystr)
# 		stdscr.move(cursor_y, cursor_x)
#
# 		# Refresh the screen
# 		stdscr.refresh()
#
# 		# Wait for next input
# 		k = stdscr.getch()
#
#
# def main():
# 	curses.wrapper(draw_menu)
#
#
# if __name__ == "__main__":
# 	main()